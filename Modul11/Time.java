/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Modul11;

import java.util.Calendar;
import javax.swing.SwingUtilities;

/**
 *
 * @author ACER
 */
public class Time extends javax.swing.JFrame {

    public Time() {
        initComponents();
        startClock();
    }

    /**
     * Creates new form Time
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HourText = new javax.swing.JTextField();
        MinuteText = new javax.swing.JTextField();
        SecondText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        HourText.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        HourText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HourTextActionPerformed(evt);
            }
        });

        MinuteText.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N

        SecondText.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        SecondText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecondTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(HourText, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(MinuteText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(SecondText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HourText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MinuteText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SecondText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HourTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HourTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HourTextActionPerformed

    private void SecondTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecondTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SecondTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Time.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Time.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Time.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Time.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(() -> new Time().setVisible(true));

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Time().setVisible(true);
            }
        });
    }

    private void startClock() {
        Thread secondThread = new Thread(new Second());
        Thread minuteThread = new Thread(new Minute());
        Thread hourThread = new Thread(new Hour());

        secondThread.start();
        minuteThread.start();
        hourThread.start();
    }

    class Second implements Runnable {

        public void run() {
            while (true) {
                Calendar cal = Calendar.getInstance();
                int second = cal.get(Calendar.SECOND);
                System.out.println("Detik: " + second);
                SwingUtilities.invokeLater(() -> SecondText.setText(String.valueOf(second)));

                try {
                    Thread.sleep(1000); // Tunggu 1 detik
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    class Minute implements Runnable {

        public void run() {
            while (true) {
                Calendar cal = Calendar.getInstance();
                int minute = cal.get(Calendar.MINUTE);
                System.out.println("Menit: " + minute);
                SwingUtilities.invokeLater(() -> MinuteText.setText(String.valueOf(minute)));

                try {
                    Thread.sleep(60000); // Tunggu 1 menit
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    class Hour implements Runnable {

        public void run() {
            while (true) {
                Calendar cal = Calendar.getInstance();
                int hour = cal.get(Calendar.HOUR_OF_DAY);
                System.out.println("Jam: " + hour);
                SwingUtilities.invokeLater(() -> HourText.setText(String.valueOf(hour)));
                try {
                    Thread.sleep(3600000); // Tunggu 1 jam
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField HourText;
    private javax.swing.JTextField MinuteText;
    private javax.swing.JTextField SecondText;
    // End of variables declaration//GEN-END:variables
}
